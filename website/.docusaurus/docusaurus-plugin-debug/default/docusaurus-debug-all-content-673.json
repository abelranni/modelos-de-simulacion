{
  "docusaurus-plugin-content-docs": {
    "default": {
      "loadedVersions": [
        {
          "versionName": "current",
          "label": "Next",
          "banner": null,
          "badge": false,
          "noIndex": false,
          "className": "docs-version-current",
          "path": "/modelos-de-simulacion/docs",
          "tagsPath": "/modelos-de-simulacion/docs/tags",
          "editUrl": "https://github.com/abelranni/modelos-de-simulacion/tree/main/docs",
          "editUrlLocalized": "https://github.com/abelranni/modelos-de-simulacion/tree/main/i18n/es/docusaurus-plugin-content-docs/current",
          "isLast": true,
          "routePriority": -1,
          "sidebarFilePath": "C:\\ucel\\modelos-de-simulacion\\website\\sidebars.js",
          "contentPath": "C:\\ucel\\modelos-de-simulacion\\website\\docs",
          "contentPathLocalized": "C:\\ucel\\modelos-de-simulacion\\website\\i18n\\es\\docusaurus-plugin-content-docs\\current",
          "docs": [
            {
              "unversionedId": "intro",
              "id": "intro",
              "title": "Introducción",
              "description": "Introducción a la documentación de la asignatura...",
              "source": "@site/docs/intro.md",
              "sourceDirName": ".",
              "slug": "/intro",
              "permalink": "/modelos-de-simulacion/docs/intro",
              "draft": false,
              "editUrl": "https://github.com/abelranni/modelos-de-simulacion/tree/main/docs/intro.md",
              "tags": [],
              "version": "current",
              "sidebarPosition": 0,
              "frontMatter": {
                "sidebar_position": 0
              },
              "sidebar": "tutorialSidebar",
              "next": {
                "title": "01 - Introducción",
                "permalink": "/modelos-de-simulacion/docs/category/01---introducción"
              }
            },
            {
              "unversionedId": "Introduccion/01.01_introduccion",
              "id": "Introduccion/01.01_introduccion",
              "title": "01.01 - Introducción",
              "description": "Modelos de Simualción",
              "source": "@site/docs/01 - Introduccion/01.01_introduccion.md",
              "sourceDirName": "01 - Introduccion",
              "slug": "/Introduccion/01.01_introduccion",
              "permalink": "/modelos-de-simulacion/docs/Introduccion/01.01_introduccion",
              "draft": false,
              "editUrl": "https://github.com/abelranni/modelos-de-simulacion/tree/main/docs/01 - Introduccion/01.01_introduccion.md",
              "tags": [],
              "version": "current",
              "frontMatter": {
                "marp": true,
                "theme": "default",
                "size": 969,
                "paginate": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "01 - Introducción",
                "permalink": "/modelos-de-simulacion/docs/category/01---introducción"
              },
              "next": {
                "title": "01.02 - Números Aleatorios y Pseudoaleatorios",
                "permalink": "/modelos-de-simulacion/docs/Introduccion/01.02_numeros_pseudoaleatorios"
              }
            },
            {
              "unversionedId": "Introduccion/01.02_numeros_pseudoaleatorios",
              "id": "Introduccion/01.02_numeros_pseudoaleatorios",
              "title": "01.02 - Números Aleatorios y Pseudoaleatorios",
              "description": "Modelos de Simualción",
              "source": "@site/docs/01 - Introduccion/01.02_numeros_pseudoaleatorios.md",
              "sourceDirName": "01 - Introduccion",
              "slug": "/Introduccion/01.02_numeros_pseudoaleatorios",
              "permalink": "/modelos-de-simulacion/docs/Introduccion/01.02_numeros_pseudoaleatorios",
              "draft": false,
              "editUrl": "https://github.com/abelranni/modelos-de-simulacion/tree/main/docs/01 - Introduccion/01.02_numeros_pseudoaleatorios.md",
              "tags": [],
              "version": "current",
              "frontMatter": {
                "marp": true,
                "theme": "default",
                "size": 969,
                "paginate": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "01.01 - Introducción",
                "permalink": "/modelos-de-simulacion/docs/Introduccion/01.01_introduccion"
              },
              "next": {
                "title": "01.03 - Métodos Congruenciales Lineales",
                "permalink": "/modelos-de-simulacion/docs/Introduccion/01.03_metodos_congruenciales_lineales"
              }
            },
            {
              "unversionedId": "Introduccion/01.03_metodos_congruenciales_lineales",
              "id": "Introduccion/01.03_metodos_congruenciales_lineales",
              "title": "01.03 - Métodos Congruenciales Lineales",
              "description": "Modelos de Simualción",
              "source": "@site/docs/01 - Introduccion/01.03_metodos_congruenciales_lineales.md",
              "sourceDirName": "01 - Introduccion",
              "slug": "/Introduccion/01.03_metodos_congruenciales_lineales",
              "permalink": "/modelos-de-simulacion/docs/Introduccion/01.03_metodos_congruenciales_lineales",
              "draft": false,
              "editUrl": "https://github.com/abelranni/modelos-de-simulacion/tree/main/docs/01 - Introduccion/01.03_metodos_congruenciales_lineales.md",
              "tags": [],
              "version": "current",
              "frontMatter": {
                "marp": true,
                "theme": "default",
                "size": 969,
                "paginate": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "01.02 - Números Aleatorios y Pseudoaleatorios",
                "permalink": "/modelos-de-simulacion/docs/Introduccion/01.02_numeros_pseudoaleatorios"
              },
              "next": {
                "title": "01.04 - Números pseudoaleatorios en Python",
                "permalink": "/modelos-de-simulacion/docs/Introduccion/01.04_py_numeros_pseudoaleatorios"
              }
            },
            {
              "unversionedId": "Introduccion/01.04_py_numeros_pseudoaleatorios",
              "id": "Introduccion/01.04_py_numeros_pseudoaleatorios",
              "title": "01.04 - Números pseudoaleatorios en Python",
              "description": "Modelos de Simualción",
              "source": "@site/docs/01 - Introduccion/01.04_py_numeros_pseudoaleatorios.md",
              "sourceDirName": "01 - Introduccion",
              "slug": "/Introduccion/01.04_py_numeros_pseudoaleatorios",
              "permalink": "/modelos-de-simulacion/docs/Introduccion/01.04_py_numeros_pseudoaleatorios",
              "draft": false,
              "editUrl": "https://github.com/abelranni/modelos-de-simulacion/tree/main/docs/01 - Introduccion/01.04_py_numeros_pseudoaleatorios.md",
              "tags": [],
              "version": "current",
              "frontMatter": {
                "marp": true,
                "theme": "default",
                "size": 969,
                "paginate": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "01.03 - Métodos Congruenciales Lineales",
                "permalink": "/modelos-de-simulacion/docs/Introduccion/01.03_metodos_congruenciales_lineales"
              },
              "next": {
                "title": "02 - Variables Aleatorias",
                "permalink": "/modelos-de-simulacion/docs/category/02---variables-aleatorias"
              }
            },
            {
              "unversionedId": "Simulacion/Anylogic/Ejemplo/banco_fase_1",
              "id": "Simulacion/Anylogic/Ejemplo/banco_fase_1",
              "title": "Oficina Bancaria Fase I",
              "description": "Modelos de Simulación",
              "source": "@site/docs/03 - Simulacion/Anylogic/Ejemplo/banco_fase_1.md",
              "sourceDirName": "03 - Simulacion/Anylogic/Ejemplo",
              "slug": "/Simulacion/Anylogic/Ejemplo/banco_fase_1",
              "permalink": "/modelos-de-simulacion/docs/Simulacion/Anylogic/Ejemplo/banco_fase_1",
              "draft": false,
              "editUrl": "https://github.com/abelranni/modelos-de-simulacion/tree/main/docs/03 - Simulacion/Anylogic/Ejemplo/banco_fase_1.md",
              "tags": [],
              "version": "current",
              "frontMatter": {
                "marp": true,
                "theme": "default",
                "size": 969,
                "paginate": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "03 - Simulación",
                "permalink": "/modelos-de-simulacion/docs/category/03---simulación"
              },
              "next": {
                "title": "Oficina Bancaria Fase II",
                "permalink": "/modelos-de-simulacion/docs/Simulacion/Anylogic/Ejemplo/banco_fase_2"
              }
            },
            {
              "unversionedId": "Simulacion/Anylogic/Ejemplo/banco_fase_2",
              "id": "Simulacion/Anylogic/Ejemplo/banco_fase_2",
              "title": "Oficina Bancaria Fase II",
              "description": "Modelos de Simulación",
              "source": "@site/docs/03 - Simulacion/Anylogic/Ejemplo/banco_fase_2.md",
              "sourceDirName": "03 - Simulacion/Anylogic/Ejemplo",
              "slug": "/Simulacion/Anylogic/Ejemplo/banco_fase_2",
              "permalink": "/modelos-de-simulacion/docs/Simulacion/Anylogic/Ejemplo/banco_fase_2",
              "draft": false,
              "editUrl": "https://github.com/abelranni/modelos-de-simulacion/tree/main/docs/03 - Simulacion/Anylogic/Ejemplo/banco_fase_2.md",
              "tags": [],
              "version": "current",
              "frontMatter": {
                "marp": true,
                "theme": "default",
                "size": 969,
                "paginate": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Oficina Bancaria Fase I",
                "permalink": "/modelos-de-simulacion/docs/Simulacion/Anylogic/Ejemplo/banco_fase_1"
              },
              "next": {
                "title": "Oficina Bancaria Fase III",
                "permalink": "/modelos-de-simulacion/docs/Simulacion/Anylogic/Ejemplo/banco_fase_3"
              }
            },
            {
              "unversionedId": "Simulacion/Anylogic/Ejemplo/banco_fase_3",
              "id": "Simulacion/Anylogic/Ejemplo/banco_fase_3",
              "title": "Oficina Bancaria Fase III",
              "description": "Modelos de Simulación",
              "source": "@site/docs/03 - Simulacion/Anylogic/Ejemplo/banco_fase_3.md",
              "sourceDirName": "03 - Simulacion/Anylogic/Ejemplo",
              "slug": "/Simulacion/Anylogic/Ejemplo/banco_fase_3",
              "permalink": "/modelos-de-simulacion/docs/Simulacion/Anylogic/Ejemplo/banco_fase_3",
              "draft": false,
              "editUrl": "https://github.com/abelranni/modelos-de-simulacion/tree/main/docs/03 - Simulacion/Anylogic/Ejemplo/banco_fase_3.md",
              "tags": [],
              "version": "current",
              "frontMatter": {
                "marp": true,
                "theme": "default",
                "size": 969,
                "paginate": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Oficina Bancaria Fase II",
                "permalink": "/modelos-de-simulacion/docs/Simulacion/Anylogic/Ejemplo/banco_fase_2"
              },
              "next": {
                "title": "Oficina Bancaria Fase IV",
                "permalink": "/modelos-de-simulacion/docs/Simulacion/Anylogic/Ejemplo/banco_fase_4"
              }
            },
            {
              "unversionedId": "Simulacion/Anylogic/Ejemplo/banco_fase_4",
              "id": "Simulacion/Anylogic/Ejemplo/banco_fase_4",
              "title": "Oficina Bancaria Fase IV",
              "description": "Modelos de Simulación",
              "source": "@site/docs/03 - Simulacion/Anylogic/Ejemplo/banco_fase_4.md",
              "sourceDirName": "03 - Simulacion/Anylogic/Ejemplo",
              "slug": "/Simulacion/Anylogic/Ejemplo/banco_fase_4",
              "permalink": "/modelos-de-simulacion/docs/Simulacion/Anylogic/Ejemplo/banco_fase_4",
              "draft": false,
              "editUrl": "https://github.com/abelranni/modelos-de-simulacion/tree/main/docs/03 - Simulacion/Anylogic/Ejemplo/banco_fase_4.md",
              "tags": [],
              "version": "current",
              "frontMatter": {
                "marp": true,
                "theme": "default",
                "size": 969,
                "paginate": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Oficina Bancaria Fase III",
                "permalink": "/modelos-de-simulacion/docs/Simulacion/Anylogic/Ejemplo/banco_fase_3"
              },
              "next": {
                "title": "Salabim Banco Fase I",
                "permalink": "/modelos-de-simulacion/docs/Simulacion/Salabim/banco_fase_1"
              }
            },
            {
              "unversionedId": "Simulacion/Salabim/banco_fase_1",
              "id": "Simulacion/Salabim/banco_fase_1",
              "title": "Salabim Banco Fase I",
              "description": "Modelos de Simulación",
              "source": "@site/docs/03 - Simulacion/Salabim/banco_fase_1.md",
              "sourceDirName": "03 - Simulacion/Salabim",
              "slug": "/Simulacion/Salabim/banco_fase_1",
              "permalink": "/modelos-de-simulacion/docs/Simulacion/Salabim/banco_fase_1",
              "draft": false,
              "editUrl": "https://github.com/abelranni/modelos-de-simulacion/tree/main/docs/03 - Simulacion/Salabim/banco_fase_1.md",
              "tags": [],
              "version": "current",
              "frontMatter": {
                "marp": false,
                "theme": "default",
                "size": 969,
                "paginate": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Oficina Bancaria Fase IV",
                "permalink": "/modelos-de-simulacion/docs/Simulacion/Anylogic/Ejemplo/banco_fase_4"
              }
            },
            {
              "unversionedId": "Variables Aleatorias/02.01_variables_aleatorias",
              "id": "Variables Aleatorias/02.01_variables_aleatorias",
              "title": "02.01 - Variables Aleatorias",
              "description": "Modelos de Simualción",
              "source": "@site/docs/02 - Variables Aleatorias/02.01_variables_aleatorias.md",
              "sourceDirName": "02 - Variables Aleatorias",
              "slug": "/Variables Aleatorias/02.01_variables_aleatorias",
              "permalink": "/modelos-de-simulacion/docs/Variables Aleatorias/02.01_variables_aleatorias",
              "draft": false,
              "editUrl": "https://github.com/abelranni/modelos-de-simulacion/tree/main/docs/02 - Variables Aleatorias/02.01_variables_aleatorias.md",
              "tags": [],
              "version": "current",
              "frontMatter": {
                "marp": true,
                "theme": "default",
                "size": 969,
                "paginate": true,
                "math": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "02 - Variables Aleatorias",
                "permalink": "/modelos-de-simulacion/docs/category/02---variables-aleatorias"
              },
              "next": {
                "title": "02.02 - Pruebas de bondad de ajuste",
                "permalink": "/modelos-de-simulacion/docs/Variables Aleatorias/02.02_pruebas_de_bondad"
              }
            },
            {
              "unversionedId": "Variables Aleatorias/02.02_pruebas_de_bondad",
              "id": "Variables Aleatorias/02.02_pruebas_de_bondad",
              "title": "02.02 - Pruebas de bondad de ajuste",
              "description": "Modelos de Simualción",
              "source": "@site/docs/02 - Variables Aleatorias/02.02_pruebas_de_bondad.md",
              "sourceDirName": "02 - Variables Aleatorias",
              "slug": "/Variables Aleatorias/02.02_pruebas_de_bondad",
              "permalink": "/modelos-de-simulacion/docs/Variables Aleatorias/02.02_pruebas_de_bondad",
              "draft": false,
              "editUrl": "https://github.com/abelranni/modelos-de-simulacion/tree/main/docs/02 - Variables Aleatorias/02.02_pruebas_de_bondad.md",
              "tags": [],
              "version": "current",
              "frontMatter": {
                "marp": true,
                "theme": "default",
                "size": 969,
                "paginate": true,
                "math": true,
                "header": "Pruebas de Bondad de Ajustes",
                "footer": "Prueba 𝜒^2"
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "02.01 - Variables Aleatorias",
                "permalink": "/modelos-de-simulacion/docs/Variables Aleatorias/02.01_variables_aleatorias"
              },
              "next": {
                "title": "02.03 - Aplicación para probar bondad de ajuste",
                "permalink": "/modelos-de-simulacion/docs/Variables Aleatorias/02.03_py_app_bondad"
              }
            },
            {
              "unversionedId": "Variables Aleatorias/02.03_py_app_bondad",
              "id": "Variables Aleatorias/02.03_py_app_bondad",
              "title": "02.03 - Aplicación para probar bondad de ajuste",
              "description": "Modelos de Simualción",
              "source": "@site/docs/02 - Variables Aleatorias/02.03_py_app_bondad.md",
              "sourceDirName": "02 - Variables Aleatorias",
              "slug": "/Variables Aleatorias/02.03_py_app_bondad",
              "permalink": "/modelos-de-simulacion/docs/Variables Aleatorias/02.03_py_app_bondad",
              "draft": false,
              "editUrl": "https://github.com/abelranni/modelos-de-simulacion/tree/main/docs/02 - Variables Aleatorias/02.03_py_app_bondad.md",
              "tags": [],
              "version": "current",
              "frontMatter": {
                "marp": true,
                "theme": "default",
                "size": 969,
                "paginate": true,
                "math": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "02.02 - Pruebas de bondad de ajuste",
                "permalink": "/modelos-de-simulacion/docs/Variables Aleatorias/02.02_pruebas_de_bondad"
              },
              "next": {
                "title": "02.04 - Distribuciones de probabilidad",
                "permalink": "/modelos-de-simulacion/docs/Variables Aleatorias/02.04_distribuciones"
              }
            },
            {
              "unversionedId": "Variables Aleatorias/02.04_distribuciones",
              "id": "Variables Aleatorias/02.04_distribuciones",
              "title": "02.04 - Distribuciones de probabilidad",
              "description": "Modelos de Simualción",
              "source": "@site/docs/02 - Variables Aleatorias/02.04_distribuciones.md",
              "sourceDirName": "02 - Variables Aleatorias",
              "slug": "/Variables Aleatorias/02.04_distribuciones",
              "permalink": "/modelos-de-simulacion/docs/Variables Aleatorias/02.04_distribuciones",
              "draft": false,
              "editUrl": "https://github.com/abelranni/modelos-de-simulacion/tree/main/docs/02 - Variables Aleatorias/02.04_distribuciones.md",
              "tags": [],
              "version": "current",
              "frontMatter": {
                "marp": true,
                "theme": "default",
                "size": 969,
                "paginate": true,
                "math": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "02.03 - Aplicación para probar bondad de ajuste",
                "permalink": "/modelos-de-simulacion/docs/Variables Aleatorias/02.03_py_app_bondad"
              },
              "next": {
                "title": "02.05 - Método de transformada inversa",
                "permalink": "/modelos-de-simulacion/docs/Variables Aleatorias/02.05_transformada_inversa"
              }
            },
            {
              "unversionedId": "Variables Aleatorias/02.05_transformada_inversa",
              "id": "Variables Aleatorias/02.05_transformada_inversa",
              "title": "02.05 - Método de transformada inversa",
              "description": "Modelos de Simualción",
              "source": "@site/docs/02 - Variables Aleatorias/02.05_transformada_inversa.md",
              "sourceDirName": "02 - Variables Aleatorias",
              "slug": "/Variables Aleatorias/02.05_transformada_inversa",
              "permalink": "/modelos-de-simulacion/docs/Variables Aleatorias/02.05_transformada_inversa",
              "draft": false,
              "editUrl": "https://github.com/abelranni/modelos-de-simulacion/tree/main/docs/02 - Variables Aleatorias/02.05_transformada_inversa.md",
              "tags": [],
              "version": "current",
              "frontMatter": {
                "marp": true,
                "theme": "default",
                "size": 969,
                "paginate": true,
                "math": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "02.04 - Distribuciones de probabilidad",
                "permalink": "/modelos-de-simulacion/docs/Variables Aleatorias/02.04_distribuciones"
              },
              "next": {
                "title": "02.03 - Interpretación de la prueba de bondad de ajuste",
                "permalink": "/modelos-de-simulacion/docs/Variables Aleatorias/02.06_interpretacion_bondad_de_ajuste"
              }
            },
            {
              "unversionedId": "Variables Aleatorias/02.06_interpretacion_bondad_de_ajuste",
              "id": "Variables Aleatorias/02.06_interpretacion_bondad_de_ajuste",
              "title": "02.03 - Interpretación de la prueba de bondad de ajuste",
              "description": "Modelos de Simualción",
              "source": "@site/docs/02 - Variables Aleatorias/02.06_interpretacion_bondad_de_ajuste.md",
              "sourceDirName": "02 - Variables Aleatorias",
              "slug": "/Variables Aleatorias/02.06_interpretacion_bondad_de_ajuste",
              "permalink": "/modelos-de-simulacion/docs/Variables Aleatorias/02.06_interpretacion_bondad_de_ajuste",
              "draft": false,
              "editUrl": "https://github.com/abelranni/modelos-de-simulacion/tree/main/docs/02 - Variables Aleatorias/02.06_interpretacion_bondad_de_ajuste.md",
              "tags": [],
              "version": "current",
              "frontMatter": {
                "marp": true,
                "theme": "default",
                "size": 969,
                "paginate": true,
                "math": true
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "02.05 - Método de transformada inversa",
                "permalink": "/modelos-de-simulacion/docs/Variables Aleatorias/02.05_transformada_inversa"
              },
              "next": {
                "title": "03 - Simulación",
                "permalink": "/modelos-de-simulacion/docs/category/03---simulación"
              }
            }
          ],
          "drafts": [],
          "sidebars": {
            "tutorialSidebar": [
              {
                "type": "doc",
                "id": "intro"
              },
              {
                "type": "category",
                "label": "01 - Introducción",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "doc",
                    "id": "Introduccion/01.01_introduccion"
                  },
                  {
                    "type": "doc",
                    "id": "Introduccion/01.02_numeros_pseudoaleatorios"
                  },
                  {
                    "type": "doc",
                    "id": "Introduccion/01.03_metodos_congruenciales_lineales"
                  },
                  {
                    "type": "doc",
                    "id": "Introduccion/01.04_py_numeros_pseudoaleatorios"
                  }
                ],
                "link": {
                  "type": "generated-index",
                  "description": "Introducción a la asignatura",
                  "slug": "/category/01---introducción",
                  "permalink": "/modelos-de-simulacion/docs/category/01---introducción"
                }
              },
              {
                "type": "category",
                "label": "02 - Variables Aleatorias",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "doc",
                    "id": "Variables Aleatorias/02.01_variables_aleatorias"
                  },
                  {
                    "type": "doc",
                    "id": "Variables Aleatorias/02.02_pruebas_de_bondad"
                  },
                  {
                    "type": "doc",
                    "id": "Variables Aleatorias/02.03_py_app_bondad"
                  },
                  {
                    "type": "doc",
                    "id": "Variables Aleatorias/02.04_distribuciones"
                  },
                  {
                    "type": "doc",
                    "id": "Variables Aleatorias/02.05_transformada_inversa"
                  },
                  {
                    "type": "doc",
                    "id": "Variables Aleatorias/02.06_interpretacion_bondad_de_ajuste"
                  }
                ],
                "link": {
                  "type": "generated-index",
                  "description": "Variables Aleatorias",
                  "slug": "/category/02---variables-aleatorias",
                  "permalink": "/modelos-de-simulacion/docs/category/02---variables-aleatorias"
                }
              },
              {
                "type": "category",
                "label": "03 - Simulación",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "category",
                    "label": "Anylogic",
                    "collapsible": true,
                    "collapsed": true,
                    "items": [
                      {
                        "type": "category",
                        "label": "Ejemplo",
                        "collapsible": true,
                        "collapsed": true,
                        "items": [
                          {
                            "type": "doc",
                            "id": "Simulacion/Anylogic/Ejemplo/banco_fase_1"
                          },
                          {
                            "type": "doc",
                            "id": "Simulacion/Anylogic/Ejemplo/banco_fase_2"
                          },
                          {
                            "type": "doc",
                            "id": "Simulacion/Anylogic/Ejemplo/banco_fase_3"
                          },
                          {
                            "type": "doc",
                            "id": "Simulacion/Anylogic/Ejemplo/banco_fase_4"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "category",
                    "label": "Salabim",
                    "collapsible": true,
                    "collapsed": true,
                    "items": [
                      {
                        "type": "doc",
                        "id": "Simulacion/Salabim/banco_fase_1"
                      }
                    ]
                  }
                ],
                "link": {
                  "type": "generated-index",
                  "description": "Programas de Simulación",
                  "slug": "/category/03---simulación",
                  "permalink": "/modelos-de-simulacion/docs/category/03---simulación"
                }
              }
            ]
          }
        }
      ]
    }
  },
  "docusaurus-plugin-content-blog": {
    "default": {
      "blogSidebarTitle": "Recent posts",
      "blogPosts": [
        {
          "id": "/banco_salabim_fase_2",
          "metadata": {
            "permalink": "/modelos-de-simulacion/blog/banco_salabim_fase_2",
            "source": "@site/blog/banco_salabim_fase_2.md",
            "title": "banco_salabim_fase_2",
            "description": "El ejemplo de la oficina bancaria con resistir y renegar",
            "date": "2023-05-03T17:20:51.516Z",
            "formattedDate": "3 de mayo de 2023",
            "tags": [],
            "readingTime": 5.78,
            "hasTruncateMarker": false,
            "authors": [],
            "frontMatter": {},
            "nextItem": {
              "title": "Bienvenida",
              "permalink": "/modelos-de-simulacion/blog/welcome"
            }
          },
          "content": "## El ejemplo de la oficina bancaria con resistir y renegar[](https://www.salabim.org/manual/Modelling.html#the-bank-office-example-with-balking-and-reneging \"Permalink to this heading\")\r\n\r\nAhora, asumimos que los clientes no van a la cola cuando hay más de 5 clientes esperando (balking). Además de eso, si un cliente está esperando más de 50, él / ella Irse también (renegar).\r\n\r\nEl código del modelo es:\r\n\r\n```python\r\n# Example - bank, 3 clerks, reneging.py\r\nimport salabim as sim\r\n\r\n\r\nclass CustomerGenerator(sim.Component):\r\n    def process(self):\r\n        while True:\r\n            Customer()\r\n            yield self.hold(sim.Uniform(5, 15).sample())\r\n\r\n\r\nclass Customer(sim.Component):\r\n    def process(self):\r\n        if len(waitingline) >= 5:\r\n            env.number_balked += 1\r\n            env.print_trace(\"\", \"\", \"balked\")\r\n            print(env.now(), \"balked\",self.name())            \r\n            yield self.cancel()\r\n        self.enter(waitingline)\r\n        for clerk in clerks:\r\n            if clerk.ispassive():\r\n                clerk.activate()\r\n                break  # activate only one clerk\r\n        yield self.hold(50)  # if not serviced within this time, renege\r\n        if self in waitingline:\r\n            self.leave(waitingline)\r\n            env.number_reneged += 1\r\n            env.print_trace(\"\", \"\", \"reneged\")\r\n        else:\r\n            yield self.passivate()  # wait for service to be completed\r\n\r\n\r\nclass Clerk(sim.Component):\r\n    def process(self):\r\n        while True:\r\n            while len(waitingline) == 0:\r\n                yield self.passivate()\r\n            self.customer = waitingline.pop()\r\n            self.customer.activate()  # get the customer out of it's hold(50)\r\n            yield self.hold(30)\r\n            self.customer.activate()  # signal the customer that's all's done\r\n\r\n\r\nenv = sim.Environment()\r\nCustomerGenerator()\r\nenv.number_balked = 0\r\nenv.number_reneged = 0\r\nclerks = [Clerk() for _ in range(3)]\r\n\r\nwaitingline = sim.Queue(\"waitingline\")\r\nenv.run(duration=300000)\r\nwaitingline.length.print_histogram(30, 0, 1)\r\nwaitingline.length_of_stay.print_histogram(30, 0, 10)\r\nprint(\"number reneged\", env.number_reneged)\r\nprint(\"number balked\", env.number_balked)\r\n\r\n```\r\n\r\nVeamos algunos detalles.\r\n\r\nEsto hace que el componente actual (un cliente) sea un componente de datos (y esté sujeto a recolección de elementos no utilizados), si la longitud de la cola es 5 o más.\r\n\r\nEl renegamiento se implementa mediante una retención de 50. Si un empleado puede atender a un cliente, tomará El cliente sale de la línea de espera y la activará en ese momento. El cliente solo tiene que comprobar si él / ella todavía está en la fila de espera. Si es así, él / ella no ha sido atendido a tiempo y, por lo tanto, renegará.\r\n\r\n```python\r\nyield self.hold(50)\r\nif self in waitingline:\r\n    self.leave(waitingline)\r\n    env.number_reneged += 1\r\nelse:\r\n     self.passivate()\r\n\r\n```\r\n\r\nTodo lo que el empleado tiene que hacer al comenzar a atender a un cliente es hacer que el siguiente cliente se alinee. Salga de la cola (como antes) y active este cliente (a la hora ahora). El efecto es que la retención del cliente terminará.\r\n\r\n```python\r\nself.customer = waitingline.pop()\r\nself.customer.activate()\r\n\r\n```\r\n\r\n## El ejemplo de la oficina bancaria con resistir y renegar (tienda)[](https://www.salabim.org/manual/Modelling.html#the-bank-office-example-with-balking-and-reneging-store \"Permalink to this heading\")\r\n\r\nAhora mostramos cómo se implementa el rechazo y el renego con una tienda.\r\n\r\nEl código del modelo es:\r\n\r\n```python\r\n# Bank, 3 clerks (store, reneging).py\r\nimport salabim as sim\r\n\r\n\r\nclass CustomerGenerator(sim.Component):\r\n    def process(self):\r\n        while True:\r\n            customer = Customer()\r\n            yield self.to_store(waiting_room, customer, fail_at=env.now())\r\n            if self.failed():\r\n                customer.cancel()\r\n                env.number_balked += 1\r\n                print(env.now(), \"balked\",customer.name())\r\n                env.print_trace(\"\", \"\", \"balked\",customer.name())\r\n            yield self.hold(sim.Uniform(5, 15))\r\n\r\n\r\nclass Clerk(sim.Component):\r\n    def process(self):\r\n        while True:\r\n            customer = yield self.from_store(waiting_room)\r\n            yield self.hold(30)\r\n\r\n\r\nclass Customer(sim.Component):\r\n    def process(self):\r\n        yield self.hold(50)\r\n        if self in waiting_room:\r\n            self.leave(waiting_room)\r\n            env.number_reneged += 1\r\n            env.print_trace(\"\", \"\", \"reneged\")\r\n\r\nenv = sim.Environment(trace=False)\r\nenv.number_balked = 0\r\nenv.number_reneged = 0\r\nCustomerGenerator()\r\nfor _ in range(3):\r\n    Clerk()\r\nwaiting_room = sim.Store(\"waiting_room\", capacity=5)\r\n\r\nenv.run(till=30000)\r\n\r\nwaiting_room.length.print_histogram(30, 0, 1)\r\nwaiting_room.length_of_stay.print_histogram(30, 0, 10)\r\nprint(\"number reneged\", env.number_reneged)\r\nprint(\"number balked\", env.number_balked)\r\n\r\n```\r\n\r\nComo puede ver, la parte de resistencia se realiza estableciendo un valor de fail\\_at de 0 en el to\\_store, lo que significa que si la solicitud no se atiende inmediatamente, El cliente se resiste.\r\n\r\nPara el renacimiento, hacemos lo mismo que con la solución ordinaria.\r\n\r\n## El ejemplo de la oficina bancaria con resistir y renegar (recursos)[](https://www.salabim.org/manual/Modelling.html#the-bank-office-example-with-balking-and-reneging-resources \"Permalink to this heading\")\r\n\r\nAhora mostramos cómo el rechazo y la renegación se implementan con recursos.\r\n\r\nEl código del modelo es:\r\n\r\n```python\r\n# Example - bank, 3 clerks, reneging (resources).py\r\nimport salabim as sim\r\n\r\n\r\nclass CustomerGenerator(sim.Component):\r\n    def process(self):\r\n        while True:\r\n            Customer()\r\n            yield self.hold(sim.Uniform(5, 15).sample())\r\n\r\n\r\nclass Customer(sim.Component):\r\n    def process(self):\r\n        if len(clerks.requesters()) >= 5:\r\n            env.number_balked += 1\r\n            env.print_trace(\"\", \"\", \"balked\")\r\n            yield self.cancel()\r\n        yield self.request(clerks, fail_delay=50)\r\n        if self.failed():\r\n            env.number_reneged += 1\r\n            env.print_trace(\"\", \"\", \"reneged\")\r\n        else:\r\n            yield self.hold(30)\r\n            self.release()\r\n\r\n\r\nenv = sim.Environment()\r\nCustomerGenerator()\r\nenv.number_balked = 0\r\nenv.number_reneged = 0\r\nclerks = sim.Resource(\"clerks\", 3)\r\n\r\nenv.run(till=50000)\r\n\r\nclerks.requesters().length.print_histogram(30, 0, 1)\r\nprint()\r\nclerks.requesters().length_of_stay.print_histogram(30, 0, 10)\r\nprint(\"number reneged\", env.number_reneged)\r\nprint(\"number balked\", env.number_balked)\r\n\r\n```\r\n\r\nComo puede ver, la parte de resistencia es exactamente la misma que en el ejemplo sin recursos.\r\n\r\nPara el reenging, todo lo que tenemos que hacer es agregar un fail\\_delay\r\n\r\n```python\r\nyield self.request(clerks, fail_delay=50)\r\n\r\n```\r\n\r\nSi la solicitud no se cumple dentro de las 50 unidades de tiempo, el proceso continúa después de esa declaración de solicitud. Y luego, simplemente verificamos si la solicitud ha fallado\r\n\r\n```python\r\nif self.failed():\r\n    env.number_reneged += 1\r\n\r\n```\r\n\r\nEste ejemplo muestra claramente la ventaja de la solución de recursos sobre el método pasivar/activate, en este ejemplo.\r\n\r\n## El ejemplo de la oficina bancaria con estados[](https://www.salabim.org/manual/Modelling.html#the-bank-office-example-with-states \"Permalink to this heading\")\r\n\r\nEl paquete salabim contiene otro concepto útil para el modelado: estados. En este caso, definimos un estado llamado worktodo.\r\n\r\nEl código del modelo es:\r\n\r\n```python\r\n# Example - bank, 3 clerks (state).py\r\nimport salabim as sim\r\n\r\n\r\nclass CustomerGenerator(sim.Component):\r\n    def process(self):\r\n        while True:\r\n            Customer()\r\n            yield self.hold(sim.Uniform(5, 15).sample())\r\n\r\n\r\nclass Customer(sim.Component):\r\n    def process(self):\r\n        self.enter(waitingline)\r\n        worktodo.trigger(max=1)\r\n        yield self.passivate()\r\n\r\n\r\nclass Clerk(sim.Component):\r\n    def process(self):\r\n        while True:\r\n            if len(waitingline) == 0:\r\n                yield self.wait((worktodo, True, 1))\r\n            self.customer = waitingline.pop()\r\n            yield self.hold(30)\r\n            self.customer.activate()\r\n\r\n\r\nenv = sim.Environment()\r\nCustomerGenerator()\r\nfor i in range(3):\r\n    Clerk()\r\nwaitingline = sim.Queue(\"waitingline\")\r\nworktodo = sim.State(\"worktodo\")\r\n\r\nenv.run(till=50000)\r\nwaitingline.print_histograms()\r\nworktodo.print_histograms()\r\n\r\n```\r\n\r\nVeamos algunos detalles.\r\n\r\n```python\r\nworktodo = sim.State('worktodo')\r\n\r\n```\r\n\r\nEsto define un estado con un valor inicial False.\r\n\r\nEn el código del cliente, el cliente intenta activar un empleado con\r\n\r\nEl efecto es que si hay empleados esperando trabajo, la espera del primer empleado es honrada y Ese empleado continúa su proceso después de\r\n\r\n```python\r\nyield self.wait(worktodo)\r\n\r\n```\r\n\r\nTenga en cuenta que el empleado solo va a esperar a trabajar después de completar un trabajo si hay no hay clientes esperando.\r\n\r\n## El ejemplo de la oficina bancaria con standby[](https://www.salabim.org/manual/Modelling.html#the-bank-office-example-with-standby \"Permalink to this heading\")\r\n\r\nEl paquete salabim contiene otro poderoso mecanismo de proceso, llamado standby. Cuando un componente está en modo de espera, se actualizará después de _cada_ evento. Normalmente, el modo de espera será Se utiliza en un bucle WHILE donde en cada evento se comprueban una o más condiciones.\r\n\r\nEl modelo con standby es\r\n\r\n```python\r\n# Example - bank, 3 clerks (standby).py\r\nimport salabim as sim\r\n\r\n\r\nclass CustomerGenerator(sim.Component):\r\n    def process(self):\r\n        while True:\r\n            Customer()\r\n            yield self.hold(sim.Uniform(5, 15).sample())\r\n\r\n\r\nclass Customer(sim.Component):\r\n    def process(self):\r\n        self.enter(waitingline)\r\n        yield self.passivate()\r\n\r\n\r\nclass Clerk(sim.Component):\r\n    def process(self):\r\n        while True:\r\n            while len(waitingline) == 0:\r\n                yield self.standby()\r\n            self.customer = waitingline.pop()\r\n            yield self.hold(30)\r\n            self.customer.activate()\r\n\r\n\r\nenv = sim.Environment(trace=True)\r\nCustomerGenerator()\r\nfor _ in range(3):\r\n    Clerk()\r\nwaitingline = sim.Queue(\"waitingline\")\r\n\r\nenv.run(till=50000)\r\nwaitingline.length.print_histogram(30, 0, 1)\r\nprint()\r\nwaitingline.length_of_stay.print_histogram(30, 0, 10)\r\n\r\n```\r\n\r\nEn este caso, la condición se verifica con frecuencia con\r\n\r\n```python\r\nwhile len(waitingline) == 0:\r\n    yield self.standby()\r\n\r\n```\r\n\r\nEl resto del código es muy similar a la versión con estados.\r\n\r\nAdvertencia\r\n\r\nEs muy importante darse cuenta de que este mecanismo puede tener un impacto significativo en el rendimiento, como después de CADA evento, el componente se vuelve actual y debe verificarse. En general, se recomienda intentar usar estados o un pasivo / activar más directo. construcción."
        },
        {
          "id": "welcome",
          "metadata": {
            "permalink": "/modelos-de-simulacion/blog/welcome",
            "source": "@site/blog/2023-04-10-bienvenida/index.md",
            "title": "Bienvenida",
            "description": "Las funciones de blogging de Docusaurus funcionan con el plugin de blog.",
            "date": "2023-04-10T00:00:00.000Z",
            "formattedDate": "10 de abril de 2023",
            "tags": [
              {
                "label": "lenguajes",
                "permalink": "/modelos-de-simulacion/blog/tags/lenguajes"
              },
              {
                "label": "c",
                "permalink": "/modelos-de-simulacion/blog/tags/c"
              },
              {
                "label": "intro",
                "permalink": "/modelos-de-simulacion/blog/tags/intro"
              }
            ],
            "readingTime": 0.28,
            "hasTruncateMarker": false,
            "authors": [
              {
                "name": "Abel Ranni",
                "title": "Developer",
                "url": "https://github.com/abelranni",
                "imageURL": "https://avatars.githubusercontent.com/u/13169667?v=4",
                "key": "abel"
              }
            ],
            "frontMatter": {
              "slug": "welcome",
              "title": "Bienvenida",
              "authors": [
                "abel"
              ],
              "tags": [
                "lenguajes",
                "c",
                "intro"
              ]
            },
            "prevItem": {
              "title": "banco_salabim_fase_2",
              "permalink": "/modelos-de-simulacion/blog/banco_salabim_fase_2"
            }
          },
          "content": "Las [funciones de blogging de Docusaurus](https://docusaurus.io/docs/blog) funcionan con el [plugin de blog](https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog).\r\n\r\nSimplemente añada archivos Markdown (o carpetas) al directorio `blog`.\r\n\r\nLos autores habituales del blog pueden añadirse a `authors.yml`.\r\n\r\nLa fecha de la entrada del blog se puede extraer de los nombres de archivo, tales como:\r\n\r\n- `2019-05-30-bienvenida.md`\r\n- `2019-05-30-welcome/index.md`\r\n\r\nEl blog también admite etiquetas."
        }
      ],
      "blogListPaginated": [
        {
          "items": [
            "/banco_salabim_fase_2",
            "welcome"
          ],
          "metadata": {
            "permalink": "/modelos-de-simulacion/blog",
            "page": 1,
            "postsPerPage": 10,
            "totalPages": 1,
            "totalCount": 2,
            "blogDescription": "Blog",
            "blogTitle": "Blog"
          }
        }
      ],
      "blogTags": {
        "/modelos-de-simulacion/blog/tags/lenguajes": {
          "label": "lenguajes",
          "items": [
            "welcome"
          ],
          "permalink": "/modelos-de-simulacion/blog/tags/lenguajes",
          "pages": [
            {
              "items": [
                "welcome"
              ],
              "metadata": {
                "permalink": "/modelos-de-simulacion/blog/tags/lenguajes",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 1,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ]
        },
        "/modelos-de-simulacion/blog/tags/c": {
          "label": "c",
          "items": [
            "welcome"
          ],
          "permalink": "/modelos-de-simulacion/blog/tags/c",
          "pages": [
            {
              "items": [
                "welcome"
              ],
              "metadata": {
                "permalink": "/modelos-de-simulacion/blog/tags/c",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 1,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ]
        },
        "/modelos-de-simulacion/blog/tags/intro": {
          "label": "intro",
          "items": [
            "welcome"
          ],
          "permalink": "/modelos-de-simulacion/blog/tags/intro",
          "pages": [
            {
              "items": [
                "welcome"
              ],
              "metadata": {
                "permalink": "/modelos-de-simulacion/blog/tags/intro",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 1,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ]
        }
      },
      "blogTagsListPath": "/modelos-de-simulacion/blog/tags"
    }
  },
  "docusaurus-plugin-content-pages": {
    "default": [
      {
        "type": "jsx",
        "permalink": "/modelos-de-simulacion/",
        "source": "@site/src/pages/index.js"
      },
      {
        "type": "mdx",
        "permalink": "/modelos-de-simulacion/markdown-page",
        "source": "@site/src/pages/markdown-page.md",
        "title": "Markdown page example",
        "description": "You don't need React to write simple standalone pages.",
        "frontMatter": {
          "title": "Markdown page example"
        }
      }
    ]
  },
  "docusaurus-plugin-debug": {},
  "docusaurus-theme-classic": {},
  "docusaurus-bootstrap-plugin": {},
  "docusaurus-mdx-fallback-plugin": {}
}