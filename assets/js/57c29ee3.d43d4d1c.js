"use strict";(self.webpackChunkmodelos_de_simulacion=self.webpackChunkmodelos_de_simulacion||[]).push([[8858],{3905:(e,n,a)=>{a.d(n,{Zo:()=>m,kt:()=>k});var l=a(7294);function t(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,l)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){t(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,l,t=function(e,n){if(null==e)return{};var a,l,t={},r=Object.keys(e);for(l=0;l<r.length;l++)a=r[l],n.indexOf(a)>=0||(t[a]=e[a]);return t}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)a=r[l],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var i=l.createContext({}),c=function(e){var n=l.useContext(i),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},m=function(e){var n=c(e.components);return l.createElement(i.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},d=l.forwardRef((function(e,n){var a=e.components,t=e.mdxType,r=e.originalType,i=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=c(a),d=t,k=u["".concat(i,".").concat(d)]||u[d]||p[d]||r;return a?l.createElement(k,o(o({ref:n},m),{},{components:a})):l.createElement(k,o({ref:n},m))}));function k(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var r=a.length,o=new Array(r);o[0]=d;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s[u]="string"==typeof e?e:t,o[1]=s;for(var c=2;c<r;c++)o[c]=a[c];return l.createElement.apply(null,o)}return l.createElement.apply(null,a)}d.displayName="MDXCreateElement"},1570:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var l=a(7462),t=(a(7294),a(3905));const r={marp:!1,theme:"default",size:969,paginate:!0},o="Salabim Banco Fase I",s={unversionedId:"Simulacion/Salabim/banco_fase_1",id:"Simulacion/Salabim/banco_fase_1",title:"Salabim Banco Fase I",description:"Modelos de Simulaci\xf3n",source:"@site/docs/03 - Simulacion/Salabim/banco_fase_1.md",sourceDirName:"03 - Simulacion/Salabim",slug:"/Simulacion/Salabim/banco_fase_1",permalink:"/modelos-de-simulacion/docs/Simulacion/Salabim/banco_fase_1",draft:!1,editUrl:"https://github.com/abelranni/modelos-de-simulacion/tree/main/docs/03 - Simulacion/Salabim/banco_fase_1.md",tags:[],version:"current",frontMatter:{marp:!1,theme:"default",size:969,paginate:!0},sidebar:"tutorialSidebar",previous:{title:"Anylogic - Ejercicio 2",permalink:"/modelos-de-simulacion/docs/Simulacion/Anylogic/Ejercicios/Ejercicio 2"},next:{title:"Salabim Banco Fase II",permalink:"/modelos-de-simulacion/docs/Simulacion/Salabim/banco_fase_2"}},i={},c=[{value:"Modelos de Simulaci\xf3n",id:"modelos-de-simulaci\xf3n",level:2},{value:"Un modelo simple\uf0c1",id:"un-modelo-simplepermalink-to-this-heading",level:2},{value:"Un ejemplo de banco\uf0c1",id:"un-ejemplo-de-bancopermalink-to-this-heading",level:2},{value:"Agregando m\xe1s empleados",id:"agregando-m\xe1s-empleados",level:3},{value:"El ejemplo de la oficina bancaria con tiendas\uf0c1",id:"el-ejemplo-de-la-oficina-bancaria-con-tiendaspermalink-to-this-heading",level:2},{value:"El ejemplo de la oficina bancaria con recursos\uf0c1",id:"el-ejemplo-de-la-oficina-bancaria-con-recursospermalink-to-this-heading",level:2}],m={toc:c},u="wrapper";function p(e){let{components:n,...a}=e;return(0,t.kt)(u,(0,l.Z)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"salabim-banco-fase-i"},"Salabim Banco Fase I"),(0,t.kt)("h2",{id:"modelos-de-simulaci\xf3n"},"Modelos de Simulaci\xf3n"),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"un-modelo-simplepermalink-to-this-heading"},"Un modelo simple",(0,t.kt)("a",{parentName:"h2",href:"https://www.salabim.org/manual/Modelling.html#a-simple-model",title:"Permalink to this heading"},"\uf0c1")),(0,t.kt)("p",null,"Comencemos con un modelo muy simple, para demostrar la estructura b\xe1sica, Interacci\xf3n de procesos, definici\xf3n de componentes y salida."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"# Car.py\nimport salabim as sim\n\n\nclass Car(sim.Component):\n    def process(self):\n        while True:\n            yield self.hold(1)\n\n\nenv = sim.Environment(trace=True)\nCar()\nenv.run(till=5)\n\n")),(0,t.kt)("p",null,"En pasos b\xe1sicos:"),(0,t.kt)("p",null,"Siempre empezamos importando salabim"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"import salabim as sim\n")),(0,t.kt)("p",null,"Ahora podemos referirnos a todas las clases de salabim y funcionar con ",(0,t.kt)("inlineCode",{parentName:"p"},"sim.")),(0,t.kt)("p",null,"El cuerpo principal de cada modelo de salabim generalmente comienza con"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"env = sim.Environment()\n")),(0,t.kt)("p",null,"o, para estar m\xe1s en l\xednea con las pr\xe1cticas comunes"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"app = sim.App()\n")),(0,t.kt)("p",null,"Para cada componente definimos una clase:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"class Car(sim.Component):\n\n")),(0,t.kt)("p",null,"La clase hereda de ",(0,t.kt)("inlineCode",{parentName:"p"},"sim.Component"),"."),(0,t.kt)("p",null,"Aunque es posible definir otros procesos dentro de una clase, la forma est\xe1ndar es definir una funci\xf3n generadora llamada ",(0,t.kt)("inlineCode",{parentName:"p"},"process")," en la clase. Un generador es una funci\xf3n con al menos una declaraci\xf3n de rendimiento ",(0,t.kt)("inlineCode",{parentName:"p"},"yield"),". Estos se utilizan en el contexto de salabim como Una se\xf1al para dar control al mecanismo de secuencia."),(0,t.kt)("p",null,"En este ejemplo,"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"yield self.hold(1)\n\n")),(0,t.kt)("p",null,"se da control al mecanismo de secuencia y ",(0,t.kt)("em",{parentName:"p"},"regresa")," despu\xe9s de 1 unidad de tiempo. El componente se coloca en un estado pasivo y se reactiva despu\xe9s de 1 unidad de tiempo. El componente se reactiva en el mismo estado en el que se pasiv\xf3."),(0,t.kt)("hr",null),(0,t.kt)("p",null,"En el cuerpo principal, Car() crea una instancia de un coche. Obtiene autom\xe1ticamente el nombre car.0. Como hay una funci\xf3n generadora llamada ",(0,t.kt)("inlineCode",{parentName:"p"},"process")," en Car, esta funci\xf3n se activar\xe1 (por defecto en el momento actual, que es 0 aqu\xed)."),(0,t.kt)("p",null,"Con"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"env.run(till=5)\n")),(0,t.kt)("p",null,"Comenzamos la simulaci\xf3n y recuperamos el control despu\xe9s de 5 unidades de tiempo."),(0,t.kt)("p",null,"Cuando ejecutamos este programa, obtenemos el siguiente resultado"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"line#         time current component    action                               information\n-----   ---------- -------------------- -----------------------------------  ------------------------------------------------\n                                        line numbers refers to               Example - basic.py\n   11                                   default environment initialize\n   11                                   main create\n   11        0.000 main                 current\n   12                                   car.0 create\n   12                                   car.0 activate                       scheduled for      0.000 @    6  process=process\n   13                                   main run                             scheduled for      5.000 @   13+\n    6        0.000 car.0                current\n    8                                   car.0 hold                           scheduled for      1.000 @    8+\n    8+       1.000 car.0                current\n    8                                   car.0 hold                           scheduled for      2.000 @    8+\n    8+       2.000 car.0                current\n    8                                   car.0 hold                           scheduled for      3.000 @    8+\n    8+       3.000 car.0                current\n    8                                   car.0 hold                           scheduled for      4.000 @    8+\n    8+       4.000 car.0                current\n    8                                   car.0 hold                           scheduled for      5.000 @    8+\n   13+       5.000 main                 current\n\n")),(0,t.kt)("h2",{id:"un-ejemplo-de-bancopermalink-to-this-heading"},"Un ejemplo de banco",(0,t.kt)("a",{parentName:"h2",href:"https://www.salabim.org/manual/Modelling.html#a-bank-example",title:"Permalink to this heading"},"\uf0c1")),(0,t.kt)("p",null,"Ahora pasemos a un modelo m\xe1s realista. Aqu\xed est\xe1n llegando los clientes un banco, donde hay un empleado. Este empleado maneja el clientes en orden primero en entrar, primero en salir (FIFO). Vemos los siguientes componentes, cada uno con su proceso:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"El generador, que crea los clientes con un tiempo de llegada entre uniforme(5,15)")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"Los clientes")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"El empleado, que atiende a los clientes en un tiempo constante de 30 (sistema sobrecargado y no estacionario)"))),(0,t.kt)("p",null,"Y necesitamos una cola para que los clientes esperen el servicio."),(0,t.kt)("p",null,"El c\xf3digo del modelo es"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'# Bank, 1 clerk.py\nimport salabim as sim\n\n\nclass CustomerGenerator(sim.Component):\n    def process(self):\n        while True:\n            Customer()\n            yield self.hold(sim.Uniform(5, 15).sample())\n\n\nclass Customer(sim.Component):\n    def process(self):\n        self.enter(waitingline)\n        if clerk.ispassive():\n            clerk.activate()\n        yield self.passivate()\n\n\nclass Clerk(sim.Component):\n    def process(self):\n        while True:\n            while len(waitingline) == 0:\n                yield self.passivate()\n            self.customer = waitingline.pop()\n            yield self.hold(30)\n            self.customer.activate()\n\n\nenv = sim.Environment(trace=True)\n\nCustomerGenerator()\nclerk = Clerk()\nwaitingline = sim.Queue("waitingline")\n\nenv.run(till=50)\nprint()\nwaitingline.print_statistics()\n\n')),(0,t.kt)("p",null,"Veamos algunos detalles"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"yield self.hold(sim.Uniform(5, 15).sample())\n\n")),(0,t.kt)("p",null,"har\xe1 el muestreo estad\xedstico y esperar\xe1 ese tiempo hasta que se cree el siguiente cliente."),(0,t.kt)("p",null,"Con:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"self.enter(waitingline)\n")),(0,t.kt)("p",null,"El cliente se coloca a la cola de la fila de espera."),(0,t.kt)("p",null,"Luego, el cliente verifica si el empleado est\xe1 inactivo y, de ser as\xed, lo activa de inmediato."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"if clerk.ispassive():\n    clerk.activate()\n")),(0,t.kt)("p",null,"Una vez que el empleado est\xe1 activo (nuevamente), saca al primer cliente de la l\xednea de espera con"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"self.customer = waitingline.pop()\n")),(0,t.kt)("p",null,"y se mantiene en ese estado durante 30 unidades de tiempo con"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"yield self.hold(30)\n")),(0,t.kt)("p",null,"Despu\xe9s de esa retenci\xf3n, el cliente se activa y terminar\xe1"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"self.customer.activate()\n")),(0,t.kt)("p",null,"En la secci\xf3n principal del programa, creamos CustomerGenerator, Clerk y una cola llamada waitingline. Una vez finalizada la simulaci\xf3n, las estad\xedsticas de la cola se presentan con"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"waitingline.print_statistics()\n")),(0,t.kt)("p",null,"El resultado se ve como"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"line#        time current component    action                               information\n------ ---------- -------------------- -----------------------------------  ------------------------------------------------\n                                       line numbers refers to               Bank, 1 clerk.py\n   30                                  default environment initialize\n   30                                  main create\n   30       0.000 main                 current\n   32                                  customergenerator.0 create\n   32                                  customergenerator.0 activate         scheduled for 0.000 @    6+ process=process\n   33                                  clerk.0 create\n   33                                  clerk.0 activate                     scheduled for 0.000 @   21+ process=process\n   34                                  waitingline create\n   36                                  main run +50.000                     scheduled for 50.000 @   36+\n   6+      0.000 customergenerator.0  current\n   8                                  customer.0 create\n   8                                  customer.0 activate                  scheduled for 0.000 @   13+ process=process\n   9                                  customergenerator.0 hold +14.631     scheduled for 14.631 @    9+\n   21+      0.000 clerk.0              current\n   24                                  clerk.0 passivate                    @   24+\n   13+      0.000 customer.0           current\n   14                                  customer.0                           enter waitingline\n   16                                  clerk.0 activate                     scheduled for 0.000 @   24+\n   17                                  customer.0 passivate                 @   17+\n   24+      0.000 clerk.0              current\n   25                                  customer.0                           leave waitingline\n   26                                  clerk.0 hold +30.000                 scheduled for 30.000 @   26+\n   9+     14.631 customergenerator.0  current\n   8                                  customer.1 create\n   8                                  customer.1 activate                  scheduled for 14.631 @   13+ process=process\n   9                                  customergenerator.0 hold +7.357      scheduled for 21.989 @    9+\n   13+     14.631 customer.1           current\n   14                                  customer.1                           enter waitingline\n   17                                  customer.1 passivate                 @   17+\n   9+     21.989 customergenerator.0  current\n   8                                  customer.2 create\n   8                                  customer.2 activate                  scheduled for 21.989 @   13+ process=process\n   9                                  customergenerator.0 hold +10.815     scheduled for 32.804 @    9+\n   13+     21.989 customer.2           current\n   14                                  customer.2                           enter waitingline\n   17                                  customer.2 passivate                 @   17+\n   26+     30.000 clerk.0              current\n   27                                  customer.0 activate                  scheduled for 30.000 @   17+\n   25                                  customer.1                           leave waitingline\n   26                                  clerk.0 hold +30.000                 scheduled for 60.000 @   26+\n   17+     30.000 customer.0           current\n   17+                                 customer.0 ended\n   9+     32.804 customergenerator.0  current\n   8                                  customer.3 create\n   8                                  customer.3 activate                  scheduled for 32.804 @   13+ process=process\n   9                                  customergenerator.0 hold +7.267      scheduled for 40.071 @    9+\n   13+     32.804 customer.3           current\n   14                                  customer.3                           enter waitingline\n   17                                  customer.3 passivate                 @   17+\n   9+     40.071 customergenerator.0  current\n   8                                  customer.4 create\n   8                                  customer.4 activate                  scheduled for 40.071 @   13+ process=process\n   9                                  customergenerator.0 hold +14.666     scheduled for 54.737 @    9+\n   13+     40.071 customer.4           current\n   14                                  customer.4                           enter waitingline\n   17                                  customer.4 passivate                 @   17+\n   36+     50.000 main                 current\n\nStatistics of waitingline at        50\n                                                                     all    excl.zero         zero\n-------------------------------------------- -------------- ------------ ------------ ------------\nLength of waitingline                        duration             50           35.369       14.631\n                                             mean                  1.410        1.993\n                                             std.deviation         1.107        0.754\n\n                                             minimum               0            1\n                                             median                2            2\n                                             90% percentile        3            3\n                                             95% percentile        3            3\n                                             maximum               3            3\n\nLength of stay in waitingline                entries               2            2            0\n                                             mean                  7.684        7.684\n                                             std.deviation         7.684        7.684\n\n                                             minimum               0            0\n                                             median                7.684        7.684\n                                             90% percentile       13.832       13.832\n                                             95% percentile       14.600       14.600\n                                             maximum              15.369       15.369\n\n")),(0,t.kt)("h3",{id:"agregando-m\xe1s-empleados"},"Agregando m\xe1s empleados"),(0,t.kt)("p",null,"Ahora, vamos a a\xf1adir m\xe1s empleados. Aqu\xed hemos optado por poner los tres empleados en una lista"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"clerks = [Clerk() for _ in range(3)]\n\n")),(0,t.kt)("p",null,"aunque en este caso tambi\xe9n podr\xedamos haberlos puesto en una cola salabim, como"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"clerks = sim.Queue('clerks')\nfor _ in range(3):\n    Clerk().enter(clerks)\n\n")),(0,t.kt)("p",null,"o incluso"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"clerks = sim.Queue('clerks', fill=[Clerk() for _ in range(3)])\n\n")),(0,t.kt)("p",null,"Y, para reiniciar un empleado:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"for clerk in clerks:\n    if clerk.ispassive():\n       clerk.activate()\n       break  # reactivate only one clerk\n\n")),(0,t.kt)("p",null,"El c\xf3digo completo es quedar\xeda as\xed:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'# Bank, 3 clerks.py\nimport salabim as sim\n\n\nclass CustomerGenerator(sim.Component):\n    def process(self):\n        while True:\n            Customer()\n            yield self.hold(sim.Uniform(5, 15).sample())\n\n\nclass Customer(sim.Component):\n    def process(self):\n        self.enter(waitingline)\n        for clerk in clerks:\n            if clerk.ispassive():\n                clerk.activate()\n                break  # activate at most one clerk\n        yield self.passivate()\n\n\nclass Clerk(sim.Component):\n    def process(self):\n        while True:\n            while len(waitingline) == 0:\n                yield self.passivate()\n            self.customer = waitingline.pop()\n            yield self.hold(30)\n            self.customer.activate()\n\n\nenv = sim.Environment(trace=False)\nCustomerGenerator()\nclerks = [Clerk() for _ in range(3)]\n\nwaitingline = sim.Queue("waitingline")\n\nenv.run(till=50000)\nwaitingline.print_histograms()\n\nwaitingline.print_info()\n\n')),(0,t.kt)("h2",{id:"el-ejemplo-de-la-oficina-bancaria-con-tiendaspermalink-to-this-heading"},"El ejemplo de la oficina bancaria con tiendas",(0,t.kt)("a",{parentName:"h2",href:"https://www.salabim.org/manual/Modelling.html#the-bank-office-example-with-stores",title:"Permalink to this heading"},"\uf0c1")),(0,t.kt)("p",null,"El paquete salabim contiene un concepto muy \xfatil para el modelado: los ",(0,t.kt)("inlineCode",{parentName:"p"},"stores"),"."),(0,t.kt)("p",null,"Un ",(0,t.kt)("inlineCode",{parentName:"p"},"store")," es esencialmente una cola (opcionalmente con capacidad limitada) que puede retener componentes."),(0,t.kt)("p",null,"Y podemos solicitar componentes del store. Si hay un componente en el store, se devuelve. ero si no lo hay el componente solicitante pasa al estado de solicitud, hasta que haya lugar disponible en el store."),(0,t.kt)("p",null,"Lo mismo ocurre con los procesos que colocan componentes en el store: si est\xe1 lleno, el componente que desea agregar algo al store entra en el estado de solicitud. Sin embargo, aqu\xed tenemos una sala de espera ilimitada."),(0,t.kt)("p",null,"El c\xf3digo es:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'# Bank, 3 clerks (store).py\nimport salabim as sim\n\n\nclass CustomerGenerator(sim.Component):\n    def process(self):\n        while True:\n            Customer().enter(waiting_room)\n            yield self.hold(sim.Uniform(5, 15))\n\n\nclass Clerk(sim.Component):\n    def process(self):\n        while True:\n            customer = yield self.from_store(waiting_room)\n            yield self.hold(30)\n\n\nclass Customer(sim.Component):\n    ...\n\n\nenv = sim.Environment(trace=False)\nCustomerGenerator()\nfor _ in range(3):\n    Clerk()\nwaiting_room = sim.Store("waiting_room")\n\n\nenv.run(till=50000)\n\nwaiting_room.print_statistics()\nwaiting_room.print_info()\n\n')),(0,t.kt)("h2",{id:"el-ejemplo-de-la-oficina-bancaria-con-recursospermalink-to-this-heading"},"El ejemplo de la oficina bancaria con recursos",(0,t.kt)("a",{parentName:"h2",href:"https://www.salabim.org/manual/Modelling.html#the-bank-office-example-with-resources",title:"Permalink to this heading"},"\uf0c1")),(0,t.kt)("p",null,"El paquete salabim contiene otro concepto \xfatil para el modelado: recursos. Los recursos tienen una capacidad limitada y pueden ser reclamados por los componentes y liberados m\xe1s tarde."),(0,t.kt)("p",null,"En el modelo del banco con la misma funcionalidad que el ejemplo anterior, los empleados se definen como un recurso con capacidad 3."),(0,t.kt)("p",null,"El c\xf3digo del modelo es:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'# Bank, 3 clerks (resources).py\nimport salabim as sim\n\n\nclass CustomerGenerator(sim.Component):\n    def process(self):\n        while True:\n            Customer()\n            yield self.hold(sim.Uniform(5, 15).sample())\n\n\nclass Customer(sim.Component):\n    def process(self):\n        yield self.request(clerks)\n        yield self.hold(30)\n        self.release()  # not really required\n\n\nenv = sim.Environment(trace=False)\nCustomerGenerator()\nclerks = sim.Resource("clerks", capacity=3)\n\nenv.run(till=50000)\n\nclerks.print_statistics()\nclerks.print_info()\n\n')),(0,t.kt)("p",null,"Veamos algunos detalles."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"clerks = sim.Resource('clerks', capacity=3)\n\n")),(0,t.kt)("p",null,"Esto define un recurso con una capacidad de 3."),(0,t.kt)("p",null,"Y luego, un cliente, solo intenta reclamar una unidad (= empleado) del recurso con"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"yield self.request(clerks)\n\n")),(0,t.kt)("p",null,"Aqu\xed, usamos el valor predeterminado de 1 unidad. Si el recurso no est\xe1 disponible, el cliente simplemente espera a que est\xe9 disponible (por orden de llegada)."),(0,t.kt)("p",null,"En contraste con el ejemplo anterior, el cliente ahora se mantiene a s\xed mismo durante 30 unidades de tiempo."),(0,t.kt)("p",null,"Y despu\xe9s de estas 30 unidades de tiempo, el cliente libera el recurso con"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"self.release()\n\n")),(0,t.kt)("p",null,"El efecto es que el salabim luego trata de honrar la siguiente solicitud pendiente, si la hay."),(0,t.kt)("p",null,"(en realidad, en este caso no es necesaria esta declaraci\xf3n de liberaci\xf3n, ya que los recursos que fueron reclamados se liberan autom\xe1ticamente cuando un proceso termina)."),(0,t.kt)("p",null,"Las estad\xedsticas se mantienen en dos colas del sistema, denominadas clerk.requesters() y clerk.claimers()."),(0,t.kt)("p",null,"El resultado es muy similar al ejemplo anterior. Las estad\xedsticas son exactamente las mismas."))}p.isMDXComponent=!0}}]);